name: Deploy site to Pages

env:
    NODE_ENV: "production"
    VITE_NEAR_ACCOUNT_ID: ${{ secrets.VITE_NEAR_ACCOUNT_ID }}
    VITE_NEAR_PRIVATE_KEY: ${{ secrets.VITE_NEAR_PRIVATE_KEY }}
    VITE_MPC_PATH: ${{ secrets.VITE_MPC_PATH }}
    VITE_MPC_CHAIN: ${{ secrets.VITE_MPC_CHAIN }}
    VITE_MPC_CONTRACT_ID: ${{ secrets.VITE_MPC_CONTRACT_ID }}
    VITE_MPC_PUBLIC_KEY: ${{ secrets.VITE_MPC_PUBLIC_KEY }}
    NEAR_PROXY_ACCOUNT: ${{ secrets.NEAR_PROXY_ACCOUNT }}
    NEAR_PROXY_CONTRACT: ${{ secrets.NEAR_PROXY_CONTRACT }}
    NEAR_PROXY_ACCOUNT_ID: ${{ secrets.NEAR_PROXY_ACCOUNT_ID }}
    NEAR_PROXY_PUBLIC_KEY: ${{ secrets.NEAR_PROXY_PUBLIC_KEY }}
    NEAR_PROXY_PRIVATE_KEY: ${{ secrets.NEAR_PROXY_PRIVATE_KEY }}

on:
    # Runs on pushes targeting the default branch
    push:
        branches: ["main"]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "pages"
    cancel-in-progress: false

jobs:
    # Build job
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
            - name: Install dependencies
              run: npm ci
            - name: Build
              run: npx run build
              env:
                  CI: true
            - name: Check build output
              run: |
                  echo "Build output:"
                  ls -la
                  if [ -d "dist" ]; then
                    echo "dist directory contents:"
                    ls -la dist
                  elif [ -d "build" ]; then
                    echo "build directory contents:"
                    ls -la build
                  else
                    echo "Neither dist nor build directory found"
                  fi
            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./

    # Deployment job
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url  }}
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
